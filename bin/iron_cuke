#!/usr/bin/env ruby
$: << File.dirname(__FILE__)+'/../lib'
require 'iron_cuke'

# configliere
Settings.use :commandline
Settings.use :commands

Settings.define_command :test,      :description => "Execute entire test flow"
Settings.define_command :learn,     :description => "Retrieve node announcements from the Chef server"
Settings.define_command :gen_tests, :description => "Generate cucumber tests"
Settings.define_command :judge,     :description => "Execute cucumber tests on the VM"

Settings({
  knife_config: "#{Dir.pwd}/knife/knife.rb",
  node: '*',
  test_dir: File.dirname(__FILE__)+'/../features',
  announces: File.dirname(__FILE__)+'/../announces.json',
  retrieve_announces: false,
})

#test
Settings.define :retrieve_announces, flag: 'r', description: 'Ironcuke will retrieve announcements from the Chef server', type: :boolean
#learn
Settings.define :knife_config, flag: 'k', description: 'Directory of the Chef homebase'
Settings.define :node, flag: 'n', description: 'Description of chef node(s) to test'
#gen_tests
Settings.define :test_dir, flag: 't', description: 'Directory to store the generated cucumber features'
Settings.define :announces, flag: 'a', description: 'File containing JSON announcements'

Settings.resolve!

def retrieve_announces
  puts "Retrieving announcements from the chef server and depositing them in '#{Settings[:announces]}'..."
  Chef::Config.from_file(Settings[:knife_config])
  query = Chef::Search::Query.new
  nodes = {results: 0, rows: []}
  query.search(:node,"name:#{Settings[:node]}") do |node|
    nodes[:rows] << node
    nodes[:results]+=1
  end
  File.open(Settings[:announces], 'w') {|f| f.write(nodes.to_json)}
end

def gen_tests
  puts "Generating tests from announcements at '#{Settings[:announces]}' and depositing them in '#{Settings[:test_dir]}'..."
  announces = File.open(Settings[:announces],'r')
  nodes = JSON.parse(announces.read)
  nodes['rows'].each do |node|
    model = ModelFactory.generate_model(node)
    Proctor.write_tests(model,Settings[:test_dir])
  end
end

def judge
  puts "Unleashing storms of judgement..."
  cuke_dir = Pathname.new(Settings[:test_dir]).parent
  Dir.chdir(cuke_dir.to_s)
  system 'bundle exec cucumber'
end

case Settings.command_name
when :test
  retrieve_announces if Settings[:retrieve_announces] or not File.exists?(Settings[:announces])
  gen_tests; judge;
when :learn
  retrieve_announces
when :gen_tests
  gen_tests
when :judge
  judge
else
  Settings.die "Please use one of the given commands"
end
